// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
window.Telegram?.WebApp?.ready();
const tg = window.Telegram?.WebApp;

document.addEventListener('DOMContentLoaded', function () {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
  const ROWS = 5;
  const COLS = 5;
  const MAX_MINES = 7;
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const cellsBoard = document.querySelector('.cells-board');
  const trapsAmountElement = document.getElementById('trapsAmount');
  const prevPresetBtn = document.getElementById('prev_preset_btn');
  const nextPresetBtn = document.getElementById('next_preset_btn');
  const safeSignalBtn = document.getElementById('safeSignalBtn');
  const resultModal = document.getElementById('resultModal');
  const resultTitle = document.getElementById('result-title');
  const resultMessage = document.getElementById('result-message');
  const playAgainBtn = document.getElementById('playAgainBtn');
  const minesLeftDisplay = document.getElementById('minesLeft');
  const scoreDisplay = document.getElementById('scoreDisplay');
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π
  const trapsToCellsOpenMapping = {
    1: 10,
    3: 5,
    5: 4,
    7: 3
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  let gameState = {
    minesCount: 1,
    cells: [],
    revealed: 0,
    firstClick: true,
    gameOver: false,
    minesPlaced: false,
    score: 0,
    signalUsed: false
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
  let originalState = cellsBoard.innerHTML;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
  const params = new URLSearchParams(window.location.search);
  const botName = params.get('botName') || 'MINES ABYZ';
  const language = params.get('language') || 'ru';
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –±–æ—Ç–∞
  const botNameElement = document.getElementById('botName');
  if (botNameElement) {
    botNameElement.textContent = botName;
    botNameElement.style.display = 'block';
  }
  
  // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
  function hidePreloader() {
    const preloader = document.querySelector('.preloader');
    if (preloader) {
      preloader.style.opacity = '0';
      setTimeout(() => {
        preloader.style.display = 'none';
        document.body.classList.add('fade-in');
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        animateBgElements();
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å—Ä–∞–∑—É
        initGame();
      }, 500);
    }
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  function animateBgElements() {
    const planets = document.querySelectorAll('.planet');
    const meteors = document.querySelectorAll('.meteor');
    const spaceStation = document.querySelector('.space-station');
    
    planets.forEach((planet, index) => {
      setTimeout(() => {
        planet.style.transition = 'opacity 1s ease';
        planet.style.opacity = '1';
      }, index * 300);
    });
    
    setTimeout(() => {
      spaceStation.style.transition = 'opacity 1s ease';
      spaceStation.style.opacity = '1';
    }, 800);
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(hidePreloader, 2000);
  
  // –û–ø—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
  const trapsOptions = [1, 3, 5, 7];
  let currentPresetIndex = 0;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
  function updateTrapsAmount() {
    if (trapsAmountElement) {
      gameState.minesCount = trapsOptions[currentPresetIndex];
      trapsAmountElement.textContent = gameState.minesCount;
      minesLeftDisplay.textContent = gameState.minesCount;
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
      trapsAmountElement.classList.add('select-traps__traps_amount--animated');
      setTimeout(() => {
        trapsAmountElement.classList.remove('select-traps__traps_amount--animated');
      }, 300);
      
      // –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
      initGame();
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
  if (prevPresetBtn) {
    prevPresetBtn.addEventListener('click', function () {
      if (currentPresetIndex > 0) {
        currentPresetIndex--;
        updateTrapsAmount();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
        this.classList.add('btn-clicked');
        setTimeout(() => this.classList.remove('btn-clicked'), 300);
      }
    });
  }
  
  if (nextPresetBtn) {
    nextPresetBtn.addEventListener('click', function () {
      if (currentPresetIndex < trapsOptions.length - 1) {
        currentPresetIndex++;
        updateTrapsAmount();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
        this.classList.add('btn-clicked');
        setTimeout(() => this.classList.remove('btn-clicked'), 300);
      }
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
  updateTrapsAmount();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  function initGame() {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    gameState = {
      minesCount: trapsOptions[currentPresetIndex],
      cells: [],
      revealed: 0,
      firstClick: true,
      gameOver: false,
      minesPlaced: false,
      score: 0,
      signalUsed: false
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    minesLeftDisplay.textContent = gameState.minesCount;
    scoreDisplay.textContent = '0';
    
    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cellsBoard.innerHTML = originalState;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫ —è—á–µ–π–∫–∞–º –∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
    const cells = cellsBoard.querySelectorAll('.cell');
    cells.forEach((cell, index) => {
      cell.dataset.index = index;
      cell.addEventListener('click', handleCellClick);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫
      setTimeout(() => {
        cell.classList.add('cell-appear');
      }, index * 30);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —è—á–µ–µ–∫
      gameState.cells[index] = {
        index: index,
        isMine: false,
        isRevealed: false,
        element: cell
      };
    });
    
    // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è—á–µ–µ–∫
    placeMines();
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–∏–≥–Ω–∞–ª–∞
    safeSignalBtn.disabled = false;
  }
  
  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω (—Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã)
  function placeMines() {
    const totalCells = ROWS * COLS;
    const mineCount = gameState.minesCount;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—Å–µ—Ö —è—á–µ–µ–∫
    let indices = Array.from({length: totalCells}, (_, i) => i);
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
    indices.sort(() => Math.random() - 0.5);
    
    // –ü–æ–º–µ—á–∞–µ–º –ø–µ—Ä–≤—ã–µ mineCount —è—á–µ–µ–∫ –∫–∞–∫ –º–∏–Ω—ã
    for (let i = 0; i < mineCount; i++) {
      if (i < indices.length) {
        gameState.cells[indices[i]].isMine = true;
      }
    }
    
    gameState.minesPlaced = true;
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  function handleCellClick(event) {
    if (gameState.gameOver) return;
    
    const cell = event.currentTarget;
    const index = parseInt(cell.dataset.index);
    const cellData = gameState.cells[index];
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (cellData.isRevealed) return;
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
    revealCell(cellData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
    checkGameState();
  }
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
  function revealCell(cellData) {
    const cell = cellData.element;
    
    // –ü–æ–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é
    cellData.isRevealed = true;
    gameState.revealed++;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    cell.classList.add('cell-fade-out');
    
    setTimeout(() => {
      // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      cell.innerHTML = '';
      
      // –ï—Å–ª–∏ –º–∏–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∑—Ä—ã–≤
      if (cellData.isMine) {
        showMine(cell);
        gameState.gameOver = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∏–Ω—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(revealAllMines, 500);
      } else {
        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —è—á–µ–π–∫—É
        showSafe(cell);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
        gameState.score += 10;
        scoreDisplay.textContent = gameState.score;
      }
      
      cell.classList.remove('cell-fade-out');
    }, 300);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω—É
  function showMine(cell) {
    const mineIcon = document.createElement('div');
    mineIcon.className = 'mine-icon';
    mineIcon.textContent = 'üí£';
    mineIcon.style.opacity = '0';
    mineIcon.style.transform = 'scale(0)';
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–∑—Ä—ã–≤–∞
    const explosion = document.createElement('div');
    explosion.className = 'explosion';
    
    cell.appendChild(explosion);
    cell.appendChild(mineIcon);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
    setTimeout(() => {
      mineIcon.style.opacity = '1';
      mineIcon.style.transform = 'scale(1)';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ Telegram)
      if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('error');
      }
    }, 100);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —è—á–µ–π–∫—É
  function showSafe(cell) {
    const safeIcon = document.createElement('div');
    safeIcon.className = 'safe-icon';
    safeIcon.textContent = '‚úì';
    safeIcon.style.opacity = '0';
    safeIcon.style.transform = 'scale(0)';
    
    cell.appendChild(safeIcon);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞
    setTimeout(() => {
      safeIcon.style.opacity = '1';
      safeIcon.style.transform = 'scale(1)';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ Telegram)
      if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('success');
      }
    }, 100);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–≤–µ–∑–¥–æ—á–∫—É (–¥–ª—è —Å–∏–≥–Ω–∞–ª–∞)
  function showStar(cell, index) {
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ —Å–Ω–∞—á–∞–ª–∞
    while (cell.firstChild) {
      cell.removeChild(cell.firstChild);
    }
    
    console.log('–°–æ–∑–¥–∞—é –∑–≤–µ–∑–¥—É –¥–ª—è —è—á–µ–π–∫–∏');
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥—ã
    const newImg = document.createElement('img');
    newImg.setAttribute('width', '40');
    newImg.setAttribute('height', '40');
    newImg.style.opacity = '0';
    newImg.style.transform = 'scale(0) rotate(0deg)';
    
    // –ü—É—Ç—å –∫ SVG
    newImg.src = 'img/stars.svg';
    newImg.classList.add('star-animation');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    newImg.addEventListener('load', function() {
      console.log('SVG –∑–≤–µ–∑–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    });
    
    newImg.addEventListener('error', function(e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG –∑–≤–µ–∑–¥—ã:', e);
      console.error('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', this.src);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ SVG, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–≤–µ–∑–¥—É
      this.style.display = 'none';
      const textStar = document.createElement('div');
      textStar.className = 'star-animation';
      textStar.textContent = '‚òÖ';
      textStar.style.fontSize = '24px';
      textStar.style.color = 'gold';
      cell.appendChild(textStar);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–≤–µ–∑–¥—ã
      setTimeout(() => {
        textStar.classList.add('fade-in');
      }, 100);
    });
    
    cell.appendChild(newImg);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ cell-glow –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    let cellGlow = cell.querySelector('.cell-glow');
    if (!cellGlow) {
      console.log('–°–æ–∑–¥–∞—é —ç–ª–µ–º–µ–Ω—Ç cell-glow, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      cellGlow = document.createElement('div');
      cellGlow.className = 'cell-glow';
      cell.appendChild(cellGlow);
    } else {
      console.log('–≠–ª–µ–º–µ–Ω—Ç cell-glow —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏
    cell.classList.add('cell-active');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä—Ü–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –∫ cell-glow
    setTimeout(() => {
      cellGlow.classList.add('pulsing');
    }, 500);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å fade-in –∫ –∑–≤–µ–∑–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      const starElem = cell.querySelector('.star-animation');
      if (starElem && !starElem.classList.contains('fade-in')) {
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—é –∫–ª–∞—Å—Å fade-in –∫ –∑–≤–µ–∑–¥–µ');
        starElem.classList.add('fade-in');
      }
    }, 100);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã
  function revealAllMines() {
    gameState.cells.forEach((cellData, index) => {
      if (cellData.isMine && !cellData.isRevealed) {
        const cell = cellData.element;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        cell.classList.add('cell-fade-out');
        
        setTimeout(() => {
          cell.innerHTML = '';
          showMine(cell);
          cell.classList.remove('cell-fade-out');
        }, index * 50); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
      }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    setTimeout(showResults, 1000);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  function checkGameState() {
    // –£—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã: –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ —è—á–µ–π–∫–∏, –∫—Ä–æ–º–µ –º–∏–Ω
    const totalCells = ROWS * COLS;
    const winCondition = totalCells - gameState.minesCount === gameState.revealed;
    
    if (gameState.gameOver) {
      // –ü—Ä–æ–∏–≥—Ä—ã—à - –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ revealAllMines
    } else if (winCondition) {
      gameState.gameOver = true;
      
      // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–±–µ–¥—É
      gameState.score += 50;
      scoreDisplay.textContent = gameState.score;
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –º–∏–Ω—ã –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
      markAllMines();
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      setTimeout(showResults, 1000);
    }
  }
  
  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –º–∏–Ω—ã (–ø—Ä–∏ –ø–æ–±–µ–¥–µ)
  function markAllMines() {
    gameState.cells.forEach((cellData, index) => {
      if (cellData.isMine && !cellData.isRevealed) {
        const cell = cellData.element;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —è—á–µ–π–∫—É
        cell.classList.add('cell-found');
        
        setTimeout(() => {
          const flagIcon = document.createElement('div');
          flagIcon.className = 'flag-icon';
          flagIcon.textContent = 'üö©';
          flagIcon.style.opacity = '0';
          flagIcon.style.transform = 'scale(0)';
          
          cell.innerHTML = '';
          cell.appendChild(flagIcon);
          
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
          setTimeout(() => {
            flagIcon.style.opacity = '1';
            flagIcon.style.transform = 'scale(1)';
          }, 100);
        }, index * 50);
      }
    });
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  function showResults() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (gameState.gameOver && gameState.revealed <= gameState.minesCount) {
      // –ü—Ä–æ–∏–≥—Ä—ã—à
      resultTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
      resultMessage.textContent = `–í—ã –Ω–∞—à–ª–∏ ${gameState.revealed - 1} –∏–∑ ${ROWS * COLS - gameState.minesCount} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫. –í–∞—à —Å—á–µ—Ç: ${gameState.score}`;
    } else {
      // –ü–æ–±–µ–¥–∞
      resultTitle.textContent = '–ü–æ–±–µ–¥–∞!';
      resultMessage.textContent = `–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏! –í–∞—à —Å—á–µ—Ç: ${gameState.score}`;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    resultModal.classList.remove('hidden');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (tg && tg.sendData) {
      const result = {
        score: gameState.score,
        win: !gameState.gameOver || gameState.revealed > gameState.minesCount,
        mines: gameState.minesCount,
        revealed: gameState.revealed
      };
      
      tg.sendData(JSON.stringify(result));
    }
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
  safeSignalBtn.addEventListener('click', function() {
    if (gameState.gameOver || gameState.signalUsed) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏
    const safeCells = gameState.cells.filter(cell => 
      !cell.isMine && !cell.isRevealed
    );
    
    if (safeCells.length === 0) return;
    
    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞");
    
    // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ Telegram)
    if (tg && tg.HapticFeedback) {
      tg.HapticFeedback.notificationOccurred('warning');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
    const cellsToShow = trapsToCellsOpenMapping[gameState.minesCount] || 1;
    
    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —è—á–µ–µ–∫, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
    const showCount = Math.min(cellsToShow, safeCells.length);
    
    console.log(`–ü–æ–∫–∞–∑—ã–≤–∞—é ${showCount} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫`);
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —è—á–µ–µ–∫
    safeCells.sort(() => Math.random() - 0.5);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è
    this.disabled = true;
    this.classList.add('btn-clicked');
    setTimeout(() => this.classList.remove('btn-clicked'), 300);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    function showStarsSequentially(index) {
      if (index >= showCount) {
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–≤–µ–∑–¥
        gameState.signalUsed = true;
        console.log("–í—Å–µ –∑–≤–µ–∑–¥—ã –ø–æ–∫–∞–∑–∞–Ω—ã");
        return;
      }
      
      const cellData = safeCells[index];
      const cellElement = cellData.element;
      
      console.log(`–ü–æ–∫–∞–∑—ã–≤–∞—é –∑–≤–µ–∑–¥–æ—á–∫—É –Ω–∞ —è—á–µ–π–∫–µ #${cellData.index}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
      cellElement.classList.add('cell-highlight');
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      setTimeout(() => {
        cellElement.classList.add('cell-fade-out');
        
        setTimeout(() => {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
          showStar(cellElement, index);
          cellElement.classList.remove('cell-fade-out');
          cellElement.classList.remove('cell-highlight');
          
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
          setTimeout(() => {
            const starImg = cellElement.querySelector('.star-animation');
            if (starImg) {
              console.log("–î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ fade-in –∫ –∑–≤–µ–∑–¥–µ");
              starImg.classList.add('fade-in');
              
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–≤–µ–∑–¥—ã
              if (tg && tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
              }
            } else {
              console.error("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–≤–µ–∑–¥—ã –≤ —è—á–µ–π–∫–µ");
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
              showStarsSequentially(index + 1);
            }, 250); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –∑–≤–µ–∑–¥–æ—á–µ–∫
          }, 150);
        }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
      }, 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    showStarsSequentially(0);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
  playAgainBtn.addEventListener('click', function() {
    resultModal.classList.add('hidden');
    initGame();
  });
  
  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ hidePreloader()
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  document.querySelectorAll('.btn').forEach(btn => {
    btn.addEventListener('mouseenter', function() {
      this.classList.add('btn-hover');
    });
    
    btn.addEventListener('mouseleave', function() {
      this.classList.remove('btn-hover');
    });
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
if (window.Telegram?.WebApp) {
  document.documentElement.dataset.theme = window.Telegram.WebApp.colorScheme;
}